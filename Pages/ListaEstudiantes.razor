@page "/lista-estudiantes"
@using ABSYS.Data
@using ABSYS.Models
@using ABSYS.Shared
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext

<PageTitle>Lista Estudiantes</PageTitle>

<h3 class="text-success fw-bold mb-4">
    <i class="bi bi-people-fill me-2"></i> Lista de Estudiantes
</h3>

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger">@mensajeError</div>
}
else if (estudiantes is null)
{
    <p>Cargando estudiantes...</p>
}
else if (!estudiantes.Any())
{
    <div class="alert alert-info">No hay estudiantes registrados.</div>
}
else
{
    <div class="card shadow-sm">
        <div class="card-body table-responsive">
            <table class="table table-striped table-hover align-middle">
                <thead class="table-dark">
                    <tr>
                        <th>Nombres</th>
                        <th>Apellidos</th>
                        <th>CURP</th>
                        <th>Email</th>
                        <th>Fecha Nac.</th>
                        <th>Dirección</th>
                        <th>Sexo</th>
                        <th>Teléfono</th>
                        <th>Carrera</th>
                        <th>Becado</th>
                        <th>Modalidad</th>
                        <th>Mascotas</th>
                        <th>¿Cuáles?</th>
                        <th>Horario Comida</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var estudiante in estudiantesPagina)
                    {
                        <tr>
                            <td>@estudiante.Nombres</td>
                            <td>@estudiante.Apellidos</td>
                            <td>@estudiante.CURP</td>
                            <td>@estudiante.Email</td>
                            <td>@estudiante.FechaNacimiento.ToShortDateString()</td>
                            <td>@estudiante.Direccion</td>
                            <td>@estudiante.Sexo</td>
                            <td>@estudiante.Telefono</td>
                            <td>@estudiante.Carrera</td>
                            <td>@(estudiante.EsBecado ? "Sí" : "No")</td>
                            <td>@estudiante.Modalidad</td>
                            <td>@(estudiante.TieneMascotas ? "Sí" : "No")</td>
                            <td>@(estudiante.TipoMascotas ?? "-")</td>
                            <td>@(estudiante.HorarioComida?.ToString("hh\\:mm tt") ?? "-")</td>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmarEliminacion(estudiante)">
                                <i class="bi bi-trash"></i> Eliminar
                            </button>
                            <button class="btn btn-primary btn-sm" @onclick="() => ConfirmarEdicion(estudiante)">
                                <i class="bi bi-pencil-square"></i> Editar
                            </button>
                        </tr>
                    }
                </tbody>
            </table>
            @if (totalPaginas > 1)
            {
                <nav class="mt-3">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(paginaActual == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="PaginaAnterior">Anterior</button>
                        </li>
                        <li class="page-item disabled">
                            <span class="page-link">Página @paginaActual de @totalPaginas</span>
                        </li>
                        <li class="page-item @(paginaActual == totalPaginas ? "disabled" : "")">
                            <button class="page-link" @onclick="PaginaSiguiente">Siguiente</button>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    </div>
}

<!-- Confirmar Eliminación -->
<ConfirmDialog Visible="@mostrarConfirmacion"
               Nombre="@estudianteSeleccionado?.Nombres"
               Titulo="Confirmar Eliminación"
               Mensaje="@($"¿Estás seguro que deseas eliminar al estudiante {estudianteSeleccionado?.Nombres}?")"
               TextoBoton="Eliminar"
               BotonColor="btn btn-danger"
               BotonIcono="bi bi-trash"
               HeaderColor="bg-danger"
               Icono="bi bi-exclamation-triangle-fill"
               OnConfirmar="EliminarConfirmado"
               OnCancelar="CancelarEliminacion" />

<!-- Confirmar Edición -->
<ConfirmDialog Visible="@mostrarConfirmarEdicion"
               Nombre="@estudianteAEditar?.Nombres"
               Mensaje="@($"¿Estás seguro que deseas editar al {estudianteAEditar?.Nombres}?")"
               OnConfirmar="EditarConfirmado"
               OnCancelar="CancelarEdicion"
               BotonColor="btn-success"
               TextoBoton="Confirmar"
               Titulo="Confirmar Edición"
               HeaderColor="bg-success"
               Icono="bi bi-check-circle" />

@code {
    private List<Estudiante>? estudiantes;
    private List<Estudiante> estudiantesPagina = new();
    private string? mensajeError;

    private int paginaActual = 1;
    private int tamañoPagina = 20;
    private int totalPaginas => (int)Math.Ceiling((double)(estudiantes?.Count ?? 0) / tamañoPagina);

    private bool mostrarConfirmacion;
    private Estudiante? estudianteSeleccionado;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            estudiantes = await DbContext.Estudiantes
                .Where(e => !e.Eliminado)
                .ToListAsync();

            ActualizarPaginacion();
        }
        catch (Exception ex)
        {
            mensajeError = $"Error accediendo a la base de datos: {ex.Message}";
        }
    }

    private void ActualizarPaginacion()
    {
        if (estudiantes == null) return;

        estudiantesPagina = estudiantes
            .Skip((paginaActual - 1) * tamañoPagina)
            .Take(tamañoPagina)
            .ToList();
    }

    private void PaginaAnterior()
    {
        if (paginaActual > 1)
        {
            paginaActual--;
            ActualizarPaginacion();
        }
    }

    private void PaginaSiguiente()
    {
        if (paginaActual < totalPaginas)
        {
            paginaActual++;
            ActualizarPaginacion();
        }
    }

    private void ConfirmarEliminacion(Estudiante estudiante)
    {
        estudianteSeleccionado = estudiante;
        mostrarConfirmacion = true;
    }

    private async Task EliminarConfirmado()
    {
        if (estudianteSeleccionado is not null)
        {
            estudianteSeleccionado.Eliminado = true;
            DbContext.Estudiantes.Update(estudianteSeleccionado);
            await DbContext.SaveChangesAsync();

            estudiantes!.Remove(estudianteSeleccionado);
            ActualizarPaginacion();
        }

        mostrarConfirmacion = false;
        estudianteSeleccionado = null;
    }

    private void CancelarEliminacion()
    {
        mostrarConfirmacion = false;
        estudianteSeleccionado = null;
    }

    private bool mostrarConfirmarEdicion;
    private Estudiante? estudianteAEditar;

    private void ConfirmarEdicion(Estudiante estudiante)
    {
        estudianteAEditar = estudiante;
        mostrarConfirmarEdicion = true;
    }

    private void CancelarEdicion()
    {
        estudianteAEditar = null;
        mostrarConfirmarEdicion = false;
    }

    private void EditarConfirmado()
    {
        if (estudianteAEditar is not null)
        {
            NavigationManager.NavigateTo($"/editar-estudiante/{estudianteAEditar.Id}");
        }

        estudianteAEditar = null;
        mostrarConfirmarEdicion = false;
    }
}



